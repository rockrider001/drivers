/*!
   @defgroup pwm_emios_driver Pulse Width Modulation (eMIOS)
   @ingroup emios

   ## Driver consideration ##
   The MPC5748G has 3 eMIOS instances and each of eMIOS modules have 32 channels.
   The MPC5746C has 2 eMIOS instances and each of eMIOS modules have 32 channels.
   The MPC5777C and MPC5746R have 2 eMIOS instances and each of eMIOS instance have 16 channels.
   They can be configured to operate in the following global modes:

    - General-Purpose Input/ Output (GPIO)
    - Single-Action Input Capture (SAIC)
    - Single-Action Output Compare (SAOC)
    - Input Pulse-Width Measurement (IPWM)
    - Input Period Measurement (IPM)
    - Double-Action Output Compare (DAOC)
    - Modulus Counter (MC)
    - Modulus Counter Buffered (MCB)
    - Output Pulse-Width and Frequency Modulation Buffered (OPWFMB)
    - Center Aligned Output Pulse Width Modulation with Dead Time Insertion Buffered (OPWMCB)
    - Output Pulse-Width Modulation Buffered (OPWMB)
    - Output Pulse-Width Modulation with Trigger (OPWMT) - This mode not apply for MPC5777C

    Have 4 different types of channel, which are listed below( Not apply for MPC5777C and MPC5746R, because they support all modes on each channel ):

<table>
  <tr>
    <th>TYPE G</th>
    <th>TYPE X</th>
    <th>TYPE Y</th>
    <th>TYPE H</th>
  </tr>
  <tr>
    <td>GPIO</td>
    <td>GPIO</td>
    <td>GPIO</td>
    <td>GPIO</td>
  </tr>
  <tr>
    <td>SAIC</td>
    <td>SAIC</td>
    <td>SAIC</td>
    <td>SAIC</td>
  </tr>
    <tr>
    <td>SAOC</td>
    <td>SAOC</td>
    <td>SAOC</td>
    <td>SAOC</td>
  </tr>
    <tr>
    <td></td>
    <td>MC</td>
    <td></td>
    <td></td>
  </tr>
    <tr>
    <td>MCB</td>
    <td>MCB</td>
    <td></td>
    <td></td>
  </tr>
    <tr>
    <td>IPWM</td>
    <td></td>
    <td></td>
    <td>IPWM</td>
  </tr>
    <tr>
    <td>IPM</td>
    <td></td>
    <td></td>
    <td>IPM</td>
  </tr>
    <tr>
    <td>DAOC</td>
    <td></td>
    <td></td>
    <td>DAOC</td>
  </tr>
    <tr>
    <td>OPWFMB</td>
    <td>OPWFMB</td>
    <td></td>
    <td></td>
  </tr>
    <tr>
    <td>OPWMCB</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
    <tr>
    <td>OPWMB</td>
    <td>OPWMB</td>
    <td>OPWMB</td>
    <td>OPWMB</td>
  </tr>
    <tr>
    <td>OPWMT</td>
    <td>OPWMT</td>
    <td>OPWMT</td>
    <td>OPWMT</td>
  </tr>
</table>
    Note that Channel Type X and G has internal counters. And channel configuration
    should be following this table:
    <table>
  <tr>
    <th>Channel</th>
    <th>eMIOS0</th>
    <th>eMIOS1</th>
    <th>eMIOS2</th>
  </tr>
  <tr>
    <td>0</td>
    <td>X</td>
    <td>X</td>
    <td>X</td>
  </tr>
    <tr>
    <td>8</td>
    <td>X</td>
    <td>X</td>
    <td>X</td>
  </tr>
    <tr>
    <td>16</td>
    <td>X</td>
    <td>X</td>
    <td>X</td>
  </tr>
    <tr>
    <td>22</td>
    <td>X</td>
    <td>X</td>
    <td>X</td>
  </tr>
    <tr>
    <td>23</td>
    <td>X</td>
    <td>X</td>
    <td>X</td>
  </tr>
    <tr>
    <td>24</td>
    <td>X</td>
    <td>X</td>
    <td>X</td>
  </tr>
  <tr>
    <td>1</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>2</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>3</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>4</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>5</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>6</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>7</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>9</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>10</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>11</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>12</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>13</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>14</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>15</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>17</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>18</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>19</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>20</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>21</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>25</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>26</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>27</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>28</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>29</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>30</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>31</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
</table>
   When using eMIOS user should follow steps:

   - Setup system clock
        - Setup system clock api
   - Initialize global eMIOS
        - EMIOS_DRV_InitGlobal
   - Setup the counter buses used
        - EMIOS_DRV_MC_InitCounterMode
   - Init modes for the channels used
        - EMIOS_DRV_PWM_InitMode
   - Init Pin
        - Setup Pin api
   - Enable global prescaler and timebase
        - EMIOS_EnableGlobalEmios

   ## How to use eMIOS driver in your application ##
   For all operation modes the user need to configure emios_common_param_t. This structure will be used for eMIOS global initialization
   (EMIOS_DRV_InitGlobal). The next functions used are specific for each operation mode.
   Example:
   @code
    /* eMIOS global configuration structure for eMIOS1_InitConfig0 */
    emios_common_param_t eMIOS1_InitConfig0 =
    {
        true,              /* If true, all channel in eMIOS group can enter debug mode */
        true,              /* Low power mode or normal mode */
        1U,                /* Select the clock divider value for the global prescaler in range (1-256) */
        false,             /* Enable or disable global prescaler */
        true,              /* Enable or disable global timebase */
#if defined(FEATURE_EMIOS_STAC_CLIENT)
        false,             /* Enable external timebase or disable */
        0U                 /* Select the address of a specific STAC server to which the STAC is assigned */
#endif
    };

    /* eMIOS global configuration structure for eMIOS1_InitConfig1 */
    emios_common_param_t eMIOS1_InitConfig1 =
    {
        true,              /* If true, all channel in eMIOS group can enter debug mode */
        true,              /* Low power mode or normal mode */
        1U,                /* Select the clock divider value for the global prescaler in range (1-256) */
        false,             /* Enable or disable global prescaler */
        true,              /* Enable or disable global timebase */
#if defined(FEATURE_EMIOS_STAC_CLIENT)
        false,             /* Enable external timebase or disable */
        0U                 /* Select the address of a specific STAC server to which the STAC is assigned */
#endif
    };

   /* Initialize eMIOS Global 0 */
    EMIOS_DRV_InitGlobal(0U,&eMIOS1_InitConfig0);

    /* Initialize eMIOS Global 1 */
    EMIOS_DRV_InitGlobal(1U,&eMIOS1_InitConfig1);

	/* Enable eMIOS Global 0 */
    EMIOS_DRV_EnableGlobalEmios(0U);

	/* Enable eMIOS Global 0 */
    EMIOS_DRV_EnableGlobalEmios(1U);

	@endcode

   ### Counter mode ###
   For this mode the user needs to configure sub-mode, Period, internal prescaler, input signal trigger mode Falling edge/Trailing edge/Falling and trailing edge

   Example:
   @code
    /* eMIOS counter mode configuration structure for eMIOS1_CntChnConfig0 */
    emios_mc_mode_param_t eMIOS1_CntChnConfig0 =
    {
        EMIOS_MODE_MC_UP_CNT_CLR_START_INT_CLK,   /* Modulus counter up mode, clear on match start, using internal clock */
        2000UL,                                   /* Period value */
        EMIOS_CLOCK_DIVID_BY_1,                   /* Internal prescaler value */
        true,                                     /* Enable Internal prescaler */
        EMIOS_INPUT_FILTER_BYPASS,                /* Filter Value, ignore if not select external clock mode */
        false,                                    /* Input capture filter state, ignore if not select external clock mode */
        EMIOS_TRIGGER_EDGE_FALLING                /* Input signal trigger mode, ignore if not select external clock mode */
    };

	/* eMIOS counter mode configuration structure for eMIOS1_CntChnConfig0 */
    emios_mc_mode_param_t eMIOS1_CntChnConfig0 =
    {
        EMIOS_MODE_MC_UP_CNT_CLR_START_INT_CLK,   /* Modulus counter up mode, clear on match start, using internal clock */
        2000UL,                                   /* Period value */
        EMIOS_CLOCK_DIVID_BY_1,                   /* Internal prescaler value */
        true,                                     /* Enable Internal prescaler */
        EMIOS_INPUT_FILTER_BYPASS,                /* Filter Value, ignore if not select external clock mode */
        false,                                    /* Input capture filter state, ignore if not select external clock mode */
        EMIOS_TRIGGER_EDGE_FALLING                /* Input signal trigger mode, ignore if not select external clock mode */
    };

    /* eMIOS counter mode configuration structure for eMIOS1_CntChnConfig1 */
    emios_mc_mode_param_t eMIOS1_CntChnConfig1 =
    {
        EMIOS_MODE_MCB_UPDOWN_CNT_FLAGX1_INT_CLK,/* Modulus counter bufferd up/down mode, flags are generated only at match start, using internal clock */
        2000UL,                                  /* Period value */
        EMIOS_CLOCK_DIVID_BY_1,                  /* Internal prescaler value */
        false,                                   /* Disable Internal prescaler */
        EMIOS_INPUT_FILTER_BYPASS,               /* Filter Value, ignore if not select external clock mode */
        false,                                   /* Input capture filter state, ignore if not select external clock mode */
        EMIOS_TRIGGER_EDGE_FALLING               /* Input signal trigger mode, ignore if not select external clock mode */
    };

    /* eMIOS counter mode configuration structure for eMIOS1_CntChnConfig2 */
    emios_mc_mode_param_t eMIOS1_CntChnConfig2 =
    {
        EMIOS_MODE_MCB_UP_COUNTER_INT_CLK,       /* Modulus counter buffered up mode, using internal clock */
        3000UL,                                  /* Period value */
        EMIOS_CLOCK_DIVID_BY_1,                  /* Internal prescaler value */
        false,                                   /* Disable Internal prescaler */
        EMIOS_INPUT_FILTER_BYPASS,               /* Filter Value, ignore if not select external clock mode */
        false,                                   /* Input capture filter state, ignore if not select external clock mode */
        EMIOS_TRIGGER_EDGE_FALLING               /* Input signal trigger mode, ignore if not select external clock mode */
    };

    /* eMIOS Counter mode Initialization for eMIOS1_CntChnConfig0 */
    EMIOS_DRV_MC_InitCounterMode(0U,EMIOS_CNT_BUSA_DRIVEN,&eMIOS1_CntChnConfig0);

	/* eMIOS Counter mode Initialization for eMIOS1_CntChnConfig1 */
    EMIOS_DRV_MC_InitCounterMode(0U,EMIOS_CNT_BUSF_DRIVEN,&eMIOS1_CntChnConfig1);

    /* eMIOS Counter mode Initialization for eMIOS1_CntChnConfig2 */
    EMIOS_DRV_MC_InitCounterMode(0U,EMIOS_CNT_BUSB_DRIVEN,&eMIOS1_CntChnConfig2);

    /* If you want to change period value */
    EMIOS_DRV_MC_SetCounterPeriod(0U, EMIOS_CNT_BUSA_DRIVEN, 15000UL );

    @endcode

   ### PWM mode ###
   For this mode the user needs to select one of these modes:
    - EMIOS OPWFMB
      Initialize Output Pulse Width and Frequency Modulation Buffered (OPWFMB) Mode. This mode provides waveforms with variable duty cycle and frequency.
	  The internal channel counter is automatically selected as the time base when this mode is selected.
	  For this mode the user needs to configure parameters such: sub-mode, internal pre-scaler, output active mode, period count, duty cycle count.
	  The internal channel counter is automatically selected as the time base when this mode is selected.

    - EMIOS OPWMB
      Initialize Output Pulse Width Modulation Buffered (OPWMB) Mode. OPWMB mode is used to generate pulses with programmable leading and trailing edge placement.
	  An external counter driven in MCB Up mode must be selected from one of the counter buses. The opwmbParam defines the first edge and the second edge.
	  The output signal polarity is defined by outputActiveMode in opwmbParam.
	  For this mode the user needs to configure parameters such: sub-mode, internal pre-scaler, output active mode, leading edge placement, trailing edge placement, timebase.
	  An external counter driven in MCB Up mode must be selected from one of the counter buses.

    - EMIOS OPWMCB
      Initialize Center Aligned Output Pulse Width Modulation with Dead Time Insertion Buffered (OPWMCB) Mode.
	  This operation mode generates a center aligned PWM with dead time insertion to the leading or trailing edge.
	  Allow smooth output signal generation when changing duty cycle and deadtime values.
	  For this mode the user needs to configure parameters such: sub-mode, internal pre-scaler, output active mode, ideal duty cycle, deadtime, timebase.
	  The time base selected for a channel configured to OPWMCB mode should be a channel configured to MCB Up/Down mode.
	  It is recommended to start the MCB channel time base after the OPWMCB mode is entered in order to avoid missing leading edge matches at the very first duty cycle.

    - EMIOS OPWMT (This mode not apply for MPC5777C)
      Initialize Output Pulse Width Modulation with Trigger (OPWMT) mode.
	  OPWMT mode is intended to support the generation of Pulse Width Modulation signals where the period is not modified while the signal is being output,
	  but where the duty cycle will be varied and must not create glitches.
	  The mode is intended to be used in conjunction with other channels executing in the same mode and sharing a common timebase.
	  It will support each channel with a fixed PWM leading edge position with respect to the other channels and the ability to generate a trigger signal
	  at any point in the period that can be output from the module to initiate activity in other parts of the SoC such as starting ADC conversions.
	  An external counter driven in either MC Up or MCB Up mode must be selected from one of the counter buses.
	  For this mode the user needs to configure parameters such: sub-mode, internal pre-scaler, output active mode, leading edge placement, trailing edge placement, timebase, trigger placement.

    Example:
    @code
    /* eMIOS OPWMT mode configuration structure for eMIOS1_PWMChnConfig0 */
    emios_pwm_param_t eMIOS1_PWMChnConfig0 =
    {
        EMIOS_MODE_OPWMT,           /* Output Pulse Width Modulation with Trigger mode */
        EMIOS_CLOCK_DIVID_BY_1,     /* Internal prescaler value */
        false,                      /* Internal prescaler Enable */
        EMIOS_NEGATIVE_PULSE,       /* Output active value, Choose active low or high level */
        0UL,                        /* Ignored */
        1000UL,                     /* Duty cycle count */
        EMIOS_BUS_SEL_A,            /* Counter bus selected */
		0UL,                        /* Ignored */
		0UL,                        /* Ignored */
        300UL                       /* Trigger Event placement */
    };

    /* eMIOS OPWFMB mode configuration structure for eMIOS1_PWMChnConfig1 */
    emios_pwm_param_t eMIOS1_PWMChnConfig1 =
    {
        EMIOS_MODE_OPWFMB_FLAGX1,   /* Output Pulse Width and Frequency Modulation Buffered */
        EMIOS_CLOCK_DIVID_BY_1,     /* Internal prescaler value */
        false,                      /* Internal prescaler Enable */
        EMIOS_NEGATIVE_PULSE,       /* Output active value, Choose active low or high level */
        1500UL,                     /* Period count */
        500UL,                      /* Duty cycle count */
		EMIOS_BUS_SEL_INTERNAL,     /* Ignored */
		0UL,                        /* Ignored */
		0UL,                        /* Ignored */
		0UL                         /* Ignored */
    };

    /* eMIOS OPWMCB mode configuration structure for eMIOS1_PWMChnConfig2 */
    emios_pwm_param_t eMIOS1_PWMChnConfig2 =
    {
        EMIOS_MODE_OPWMCB_TRAIL_EDGE_DEADTIME_FLAGX1, /* Center Aligned Output Pulse Width Modulation with Dead Time Insertion Buffered */
        EMIOS_CLOCK_DIVID_BY_1,     /* Internal prescaler value */
        false,                      /* Internal prescaler Enable */
        EMIOS_NEGATIVE_PULSE,       /* Output active value, Choose active low or high level */
		0UL,                        /* Ignored */
		0UL,                        /* Ignored */
		EMIOS_BUS_SEL_F,            /* Counter bus selected */
        1300UL,                     /* Ideal duty cycle value using to compare with the selected time base */
        50UL,                       /* The dead time value and is compared against the internal counter */
        0UL                         /* Ignored */
    };

    /* eMIOS OPWMB mode configuration structure for eMIOS1_PWMChnConfig3 */
    emios_pwm_param_t eMIOS1_PWMChnConfig3 =
    {
        EMIOS_MODE_OPWMB_FLAGX1,    /* Output Pulse Width Modulation Buffered */
        EMIOS_CLOCK_DIVID_BY_1,     /* Internal prescaler value */
        false,                      /* Internal prescaler Enable */
        EMIOS_NEGATIVE_PULSE,       /* Output active value, Choose active low or high level */
    	0UL,                        /* Ignored */
        700UL,                      /* Duty cycle count */
        EMIOS_BUS_SEL_BCDE,         /* Counter bus selected */
    	0UL,                        /* Ignored */
    	0UL,                        /* Ignored */
    	0UL                         /* Ignored */
    };
    /* eMIOS PWM mode Initialization for eMIOS1_PWMChnConfig0 */
    EMIOS_DRV_PWM_InitPWMMode(0U, 4U, &eMIOS1_PWMChnConfig0);

    /* If you want to update leading match value at OPWMT mode */
    EMIOS_DRV_PWM_SetLeadingEdgePlacement(0U, 4U, 250UL);

    /* If you want to update trailing match value at OPWMT mode */
    EMIOS_DRV_PWM_SetTrailingEdgePlacement(0U, 4U, 1500UL);

    /* If you want to update trigger placement value at OPWMT mode */
    EMIOS_DRV_PWM_SetTriggerPlacement(0U, 4U, 500UL);


    /* eMIOS PWM mode Initialization for eMIOS1_PWMChnConfig1 - OPWFMB mode */
    EMIOS_DRV_PWM_InitPWMMode(0U, 7U, &eMIOS1_PWMChnConfig1);

    /* If you want to update duty cycle at OPWFMB mode */
    EMIOS_DRV_PWM_SetDutyCycle(0U, 7U, 700UL);

    /* If you want to update period at OPWFMB mode */
    EMIOS_DRV_PWM_SetPeriod(0U, 7U, 1800UL);


    /* eMIOS PWM mode Initialization for eMIOS1_PWMChnConfig2 - OPWMCB mode*/
    EMIOS_DRV_PWM_InitPWMMode(0U, 3U, &eMIOS1_PWMChnConfig2);

    /* If you want to update Ideal duty cycle value at OPWMCB mode */
    EMIOS_DRV_PWM_SetDutyCycle(0U, 3U, 1400UL);

    /* If you want to update dead time value at OPWMCB mode */
    EMIOS_DRV_PWM_SetCenterAlignDeadTime(0U, 3U, 500UL);


    /* eMIOS PWM mode Initialization for eMIOS1_PWMChnConfig3 - OPWMB mode*/
    EMIOS_DRV_PWM_InitPWMMode(0U, 6U, &eMIOS1_PWMChnConfig3);

    /* If you want to update leading match value at OPWMB mode */
    EMIOS_DRV_PWM_SetLeadingEdgePlacement(0U, 6U, 200UL);

    /* If you want to update trailing match value at OPWMB mode */
    EMIOS_DRV_PWM_SetTrailingEdgePlacement(0U, 6U, 1000UL);

    @endcode
@}*/
