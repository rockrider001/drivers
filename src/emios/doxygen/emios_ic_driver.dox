/*!
   @defgroup ic_emios_driver Input capture (eMIOS)
   @ingroup emios
   @details
   @brief Input capture mode (measure time events, period measurement).

   ## Driver consideration ##
   The MPC5748G has 3 eMIOS instances and each of eMIOS modules have 32 channels.
   The MPC5746C has 2 eMIOS instances and each of eMIOS modules have 32 channels.
   The MPC5777C and MPC5746R have 2 eMIOS instances and each of eMIOS instance have 16 channels.
   They can be configured to operate in the following global modes:

    - General-Purpose Input/ Output (GPIO)
    - Single-Action Input Capture (SAIC)
    - Single-Action Output Compare (SAOC)
    - Input Pulse-Width Measurement (IPWM)
    - Input Period Measurement (IPM)
    - Double-Action Output Compare (DAOC)
    - Modulus Counter (MC)
    - Modulus Counter Buffered (MCB)
    - Output Pulse-Width and Frequency Modulation Buffered (OPWFMB)
    - Center Aligned Output Pulse Width Modulation with Dead Time Insertion Buffered (OPWMCB)
    - Output Pulse-Width Modulation Buffered (OPWMB)
    - Output Pulse-Width Modulation with Trigger (OPWMT)

    ## Important note when use EMIOS_IC for MPC5777C device ##
    1. The signals affected by this situation appear in IGF interaction with other modules. To route an affected signal directly to an eMIOS instance, program the
      applicable channel of the applicable IGF instance:@n
      1a. Ensure that IGF_MCRn[MDIS] is 0 and that the IGF channel is disabled: IGF_MCRn[FGEN] is 0.@n
      1b. Configure the rising and falling edges for bypass:@n
        • Rising edge: Write 00b to IGF_MCRn[RFM].
        • Falling edge: Write 00b to IGF_MCRn[FFM].
      1c. Enable the IGF channel: Write 1 to IGF_MCRn[FGEN].@n
    2. Some eMIOS input channels do not have filters because the input channels are not connected directly from pads. They are
      connected from the DSPI module:@n
      2a. eMIOS_0 input channel 4 and 5 are connected from the DSPI_B module.
      2b. eMIOS_1 input channel 6 and 7 are connected from the DSPI_D module.
    Example Code enable IGF module:@
@code
    uint8_t i = 0U;
    /* Set FGEN bitfield for instance 0 of the IFG module to enable input channels for EMIOS instance 0 */
    IGF_0->MCR_CH0 = IGF_MCR_CH0_FGEN(1);
    for (i = 0; i < 28; i++)
    {
       IGF_0->CHa[i].MCR = IGF_0->MCR_CH0;
    }

    /* Set FGEN bitfield for instance 1 of the IFG module to enable input channels for EMIOS instance 1 */
    IGF_1->MCR_CH0 = IGF_MCR_CH0_FGEN(1);
    for (i = 32; i < 45; i++)
    {
       IGF_1->CHa[i].MCR = IGF_1->MCR_CH0;
    }
@endcode

    Have 4 different types of channel, which are listed below( Not apply for MPC5777C and MPC5746R, because they support all modes on each channel ):

<table>
  <tr>
    <th>TYPE G</th>
    <th>TYPE X</th>
    <th>TYPE Y</th>
    <th>TYPE H</th>
  </tr>
  <tr>
    <td>GPIO</td>
    <td>GPIO</td>
    <td>GPIO</td>
    <td>GPIO</td>
  </tr>
  <tr>
    <td>SAIC</td>
    <td>SAIC</td>
    <td>SAIC</td>
    <td>SAIC</td>
  </tr>
    <tr>
    <td>SAOC</td>
    <td>SAOC</td>
    <td>SAOC</td>
    <td>SAOC</td>
  </tr>
    <tr>
    <td></td>
    <td>MC</td>
    <td></td>
    <td></td>
  </tr>
    <tr>
    <td>MCB</td>
    <td>MCB</td>
    <td></td>
    <td></td>
  </tr>
    <tr>
    <td>IPWM</td>
    <td></td>
    <td></td>
    <td>IPWM</td>
  </tr>
    <tr>
    <td>IPM</td>
    <td></td>
    <td></td>
    <td>IPM</td>
  </tr>
    <tr>
    <td>DAOC</td>
    <td></td>
    <td></td>
    <td>DAOC</td>
  </tr>
    <tr>
    <td>OPWFMB</td>
    <td>OPWFMB</td>
    <td></td>
    <td></td>
  </tr>
    <tr>
    <td>OPWMCB</td>
    <td></td>
    <td></td>
    <td></td>
  </tr>
    <tr>
    <td>OPWMB</td>
    <td>OPWMB</td>
    <td>OPWMB</td>
    <td>OPWMB</td>
  </tr>
    <tr>
    <td>OPWMT</td>
    <td>OPWMT</td>
    <td>OPWMT</td>
    <td>OPWMT</td>
  </tr>
</table>
    Note that Channel Type X and G has internal counters. And channel configuration
    should be following this table:
    <table>
  <tr>
    <th>Channel</th>
    <th>eMIOS0</th>
    <th>eMIOS1</th>
    <th>eMIOS2</th>
  </tr>
  <tr>
    <td>0</td>
    <td>X</td>
    <td>X</td>
    <td>X</td>
  </tr>
    <tr>
    <td>8</td>
    <td>X</td>
    <td>X</td>
    <td>X</td>
  </tr>
    <tr>
    <td>16</td>
    <td>X</td>
    <td>X</td>
    <td>X</td>
  </tr>
    <tr>
    <td>22</td>
    <td>X</td>
    <td>X</td>
    <td>X</td>
  </tr>
    <tr>
    <td>23</td>
    <td>X</td>
    <td>X</td>
    <td>X</td>
  </tr>
    <tr>
    <td>24</td>
    <td>X</td>
    <td>X</td>
    <td>X</td>
  </tr>
  <tr>
    <td>1</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>2</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>3</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>4</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>5</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>6</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>7</td>
    <td>G</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>9</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>10</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>11</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>12</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>13</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>14</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>15</td>
    <td>H</td>
    <td>H</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>17</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>18</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>19</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>20</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>21</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>25</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>26</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>27</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>28</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>29</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>30</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
  <tr>
    <td>31</td>
    <td>Y</td>
    <td>Y</td>
    <td>Y</td>
  </tr>
</table>
   When using eMIOS user should follow steps:

   - Setup system clock
        - Setup system clock api
   - Initialize global eMIOS
        - EMIOS_DRV_InitGlobal
   - Setup the counter buses used
        - EMIOS_DRV_MC_InitCounterMode
   - Init modes for the channels used
        - EMIOS_DRV_IC_InitInputCaptureMode
   - Init Pin
        - Setup Pin api
   - Enable global prescaler and timebase
        - EMIOS_EnableGlobalEmios

   ## How to use eMIOS driver in your application ##
   For all operation modes the user need to configure emios_common_param_t. This structure will be used for eMIOS global initialization
   (EMIOS_DRV_InitGlobal). The next functions used are specific for each operation mode.
   Example:
   @code
    /* eMIOS global configuration structure for eMIOS1_InitConfig0 */
    emios_common_param_t eMIOS1_InitConfig0 =
    {
        true,              /* If true, all channel in eMIOS group can enter debug mode */
        true,              /* Low power mode or normal mode */
        1U,                /* Select the clock divider value for the global prescaler in range (1-256) */
        false,             /* Enable or disable global prescaler */
        true,              /* Enable or disable global timebase */
#if defined(FEATURE_EMIOS_STAC_CLIENT)
        false,             /* Enable external timebase or disable */
        0U                 /* Select the address of a specific STAC server to which the STAC is assigned */
#endif
    };

    /* eMIOS global configuration structure for eMIOS1_InitConfig1 */
    emios_common_param_t eMIOS1_InitConfig1 =
    {
        true,              /* If true, all channel in eMIOS group can enter debug mode */
        true,              /* Low power mode or normal mode */
        1U,                /* Select the clock divider value for the global prescaler in range (1-256) */
        false,             /* Enable or disable global prescaler */
        true,              /* Enable or disable global timebase */
#if defined(FEATURE_EMIOS_STAC_CLIENT)
        false,             /* Enable external timebase or disable */
        0U                 /* Select the address of a specific STAC server to which the STAC is assigned */
#endif
    };

   /* Initialize eMIOS Global 0 */
    EMIOS_DRV_InitGlobal(0U,&eMIOS1_InitConfig0);

    /* Initialize eMIOS Global 1 */
    EMIOS_DRV_InitGlobal(1U,&eMIOS1_InitConfig1);

	/* Enable eMIOS Global 0 */
    EMIOS_DRV_EnableGlobalEmios(0U);

	/* Enable eMIOS Global 0 */
    EMIOS_DRV_EnableGlobalEmios(1U);

	@endcode

   ### Counter mode ###
   For this mode the user needs to configure sub-mode, Period, internal prescaler, input signal trigger mode Falling edge/Trailing edge/Falling and trailing edge

   Example:
   @code
    /* eMIOS counter mode configuration structure for eMIOS1_CntChnConfig0 */
    emios_mc_mode_param_t eMIOS1_CntChnConfig0 =
    {
        EMIOS_MODE_MC_UP_CNT_CLR_START_INT_CLK,   /* Modulus counter up mode, clear on match start, using internal clock */
        2000UL,                                   /* Period value */
        EMIOS_CLOCK_DIVID_BY_1,                   /* Internal prescaler value */
        true,                                     /* Enable Internal prescaler */
        EMIOS_INPUT_FILTER_BYPASS,                /* Filter Value, ignore if not select external clock mode */
        false,                                    /* Input capture filter state, ignore if not select external clock mode */
        EMIOS_TRIGGER_EDGE_FALLING                /* Input signal trigger mode, ignore if not select external clock mode */
    };

	/* eMIOS counter mode configuration structure for eMIOS1_CntChnConfig0 */
    emios_mc_mode_param_t eMIOS1_CntChnConfig0 =
    {
        EMIOS_MODE_MC_UP_CNT_CLR_START_INT_CLK,   /* Modulus counter up mode, clear on match start, using internal clock */
        2000UL,                                   /* Period value */
        EMIOS_CLOCK_DIVID_BY_1,                   /* Internal prescaler value */
        true,                                     /* Enable Internal prescaler */
        EMIOS_INPUT_FILTER_BYPASS,                /* Filter Value, ignore if not select external clock mode */
        false,                                    /* Input capture filter state, ignore if not select external clock mode */
        EMIOS_TRIGGER_EDGE_FALLING                /* Input signal trigger mode, ignore if not select external clock mode */
    };

    /* eMIOS counter mode configuration structure for eMIOS1_CntChnConfig1 */
    emios_mc_mode_param_t eMIOS1_CntChnConfig1 =
    {
        EMIOS_MODE_MCB_UPDOWN_CNT_FLAGX1_INT_CLK,/* Modulus counter bufferd up/down mode, flags are generated only at match start, using internal clock */
        2000UL,                                  /* Period value */
        EMIOS_CLOCK_DIVID_BY_1,                  /* Internal prescaler value */
        false,                                   /* Disable Internal prescaler */
        EMIOS_INPUT_FILTER_BYPASS,               /* Filter Value, ignore if not select external clock mode */
        false,                                   /* Input capture filter state, ignore if not select external clock mode */
        EMIOS_TRIGGER_EDGE_FALLING               /* Input signal trigger mode, ignore if not select external clock mode */
    };

    /* eMIOS counter mode configuration structure for eMIOS1_CntChnConfig2 */
    emios_mc_mode_param_t eMIOS1_CntChnConfig2 =
    {
        EMIOS_MODE_MCB_UP_COUNTER_INT_CLK,       /* Modulus counter buffered up mode, using internal clock */
        3000UL,                                  /* Period value */
        EMIOS_CLOCK_DIVID_BY_1,                  /* Internal prescaler value */
        false,                                   /* Disable Internal prescaler */
        EMIOS_INPUT_FILTER_BYPASS,               /* Filter Value, ignore if not select external clock mode */
        false,                                   /* Input capture filter state, ignore if not select external clock mode */
        EMIOS_TRIGGER_EDGE_FALLING               /* Input signal trigger mode, ignore if not select external clock mode */
    };

    /* eMIOS Counter mode Initialization for eMIOS1_CntChnConfig0 */
    EMIOS_DRV_MC_InitCounterMode(0U,EMIOS_CNT_BUSA_DRIVEN,&eMIOS1_CntChnConfig0);

	/* eMIOS Counter mode Initialization for eMIOS1_CntChnConfig1 */
    EMIOS_DRV_MC_InitCounterMode(0U,EMIOS_CNT_BUSF_DRIVEN,&eMIOS1_CntChnConfig1);

    /* eMIOS Counter mode Initialization for eMIOS1_CntChnConfig2 */
    EMIOS_DRV_MC_InitCounterMode(0U,EMIOS_CNT_BUSB_DRIVEN,&eMIOS1_CntChnConfig2);

    /* If you want to change period value */
    EMIOS_DRV_MC_SetCounterPeriod(0U, EMIOS_CNT_BUSA_DRIVEN, 15000UL );

    @endcode
   ### Input capture mode ###
   Initialize Input Measurement Mode or Single Action Input Capture mode. Have 2 options:
   - Input Measurement Mode
     This mode allows the measurement of the width of a positive or negative pulse or period of an input signal by capturing two consecutive rising edges or two consecutive falling edges.
     In period measurement mode: Successive input captures are done on consecutive edges of the same polarity. The input signal must have at least four system clock cycles period in order to be properly
     captured by the synchronization logic at the channel input even if the input filter is in by-pass mode.
   - Single Action Input Capture mode
     In SAIC mode, when a triggering event occurs on the input pin, the value on the selected time base is captured.

   For this mode the user needs to configure parameters such: sub-mode, timebase, input filter, inputCapture mode. All this information is included in emios_input_capture_param_t data type.

   EMIOS_DRV_IC_GetLastMeasurement can be used to get last measurement value in input capture mode at run time.

   Example:
    @code
    /* eMIOS Input capture mode configuration structure for eMIOS1_ICChnConfig0 */
    emios_input_capture_param_t eMIOS1_ICChnConfig0 =
    {
        EMIOS_MODE_IC,                     /* Input capture mode */
        EMIOS_BUS_SEL_A,                   /* Counter bus selected */
        EMIOS_INPUT_FILTER_BYPASS,         /* Filter Value */
        false,                             /* Input capture filter state */
        EMIOS_CAPTURE_TRIGGER_EDGE_FALLING /* Input capture mode */
    };
	/* eMIOS Input capture mode Initialization for eMIOS1_ICChnConfig0 */
    EMIOS_DRV_IC_InitInputCaptureMode(0U, 5U, &eMIOS1_ICChnConfig0);

	/* If you want to get last measurement value */
	uint32_t retVal;

	EMIOS_DRV_IC_GetLastMeasurement(0U, 5U, &retVal);
	Note that to get true value of measurement at the first of pulse, please read EMIOS_DRV_IC_GetLastMeasurement in interrupt.
    @endcode
@}*/
