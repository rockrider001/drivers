/** 
@defgroup i2c_drv I2C Driver
@ingroup i2c
<p>
  The I2C driver allows communication on an I2C bus using the I2C module in the MPC57xx processor.
</p>

  ## Features ##
   - Interrupt based
   - Master or slave operation
   - Provides blocking and non-blocking transmit and receive functions
   - 7-bit addressing
   - DMA support for master mode
   - Multi-master operation

  ## Functionality ##
<p>
  In order to use the I2C driver it must be first initialized in either master of slave mode, 
  using functions I2C_DRV_MasterInit() or I2C_DRV_SlaveInit(). Once initialized, it cannot 
  be initialized again for the same I2C module instance until it is de-initialized, using 
  I2C_DRV_MasterDeinit() or I2C_DRV_SlaveDeinit(). Different I2C module instances can function 
  independently of each other.
</p>

  ### Master Mode ###
  
<p>
  To send or receive data to/from the currently configured slave address, use functions I2C_DRV_MasterSendData()
  or I2C_DRV_MasterReceiveData() (or their blocking counterparts). Parameter <tt>sendStop</tt> can be
  used to chain multiple transfers with repeated START condition between them, for example when sending a command
  and then immediately receiving a response. The application should ensure that any send or receive transfer with
  <tt>sendStop</tt> set to <tt>false</tt> is followed by another transfer, otherwise the I2C master will hold 
  the SCL line low indefinitely and block the I2C bus. The last transfer from a chain should always have
  <tt>sendStop</tt> set to <tt>true</tt>.
</p>
<p>
  Blocking operations will return only when the transfer is completed, either successfully or with error. 
  Non-blocking operations will initiate the transfer and return \ref STATUS_SUCCESS, but the module is still 
  busy with the transfer and another transfer can't be initiated until the current transfer is complete. The 
  application can check the status of the current transfer by calling I2C_DRV_MasterGetTransferStatus(). 
  If the transfer is completed, the functions will return either \ref STATUS_SUCCESS or an error code, depending
  on the outcome of the last transfer.
</p>

  ### Slave Mode ###
<p>
  Slave Mode provides functions for transmitting or receiving data to/from any I2C master. There are two 
  slave operating modes, selected by the field <tt>slaveListening</tt> in the slave configuration structure:
   - Slave always listening: the slave interrupt is enabled at initialization time and the slave always 
   listens to the line for a master addressing it. Any events are reported to the application through the 
   callback function provided at initialization time. The callback can use I2C_DRV_SlaveSetRxBuffer() 
   or I2C_DRV_SlaveSetTxBuffer() to provide the appropriate buffers for transmit or receive, as needed.
   - On-demand operation: the slave is commanded to transmit or receive data through the call of 
   I2C_DRV_SlaveSendData() and I2C_DRV_SlaveReceiveData() (or their blocking counterparts). The 
   actual moment of the transfer depends on the I2C master. The use of callbacks optional in this case, 
   for example to treat events like \ref I2C_SLAVE_EVENT_TX_EMPTY or \ref I2C_SLAVE_EVENT_RX_FULL. 
   Outside the commanded receive / transmit operations the I2C interrupts are disabled and the module 
   will not react to master transfer requests.
</p>

  ## Important Notes ##
<p>
  - Before using the I2C driver in master mode the protocol clock of the module must be configured.
  - Before using the I2C driver the pins must be routed to the I2C module.
  - The driver enables the interrupts for the corresponding I2C module, but any interrupt priority 
  setting must be done by the application.
  - In listening mode, the init function must be called before the master starts the transfer. In non-listening
  mode, the init function and the appropriate send/receive function must be called before the master starts
  the transfer.
  - Aborting a transfer with the function I2C_DRV_SlaveAbortTransferData() can be done only if slave is in non-listening mode. 
  - Aborting a transfer with the function I2C_DRV_MasterAbortTransferData() can't be done safely due to device limitation; there is 
  no way to know the exact stage of the transfer, and if we disable the module in the middle of the transfer of a character the slave may 
  hold the SDA line forever low and block the I2C bus. Same situation may happen if a blocking transfer function is used and TIMEOUT occurs.  
</p>

<b>Example:</b>

@code

#define INST_I2C1 0
#define INST_I2C2 1
#define INST_I2C3 2
#define INST_I2C4 3

const i2c_master_user_config_t i2c1_MasterConfig0 = {
  .slaveAddress = 32U,
  .sendData = false,
  .baudRate = 54U,
  .transferType = I2C_USING_INTERRUPTS,
  .dmaChannel = 17U,
  .masterCallback = i2c1_MasterCallback0,
  .callbackParam = NULL,
};

const i2c_slave_user_config_t i2c1_SlaveConfig0 = {
  .slaveAddress = 32U,
  .slaveListening = true,
  .slaveCallback = i2c1_SlaveCallback0,
  .callbackParam = NULL,
};


#define BUFFER_SIZE 16

/* Initializing master Tx buffer and slave Rx buffer */
uint8_t masterTxBuffer[BUFFER_SIZE] = {0xA, 0xB, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xA, 0xB, 0xC, 0xD, 0xE};
uint8_t slaveRxBuffer[BUFFER_SIZE] = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};


/* Callback of slave */
void i2c1_SlaveCallback0(uint8_t instance, i2c_slave_event_t slaveEvent,
        void *userData) {

    /* Because userData parameter is not used cast it to void to avoid triggering a
     * warning.
     */
    (void)userData;

    /* Check the event type:
     *  - set RX or TX buffers depending on the master request type
     */
    if (slaveEvent == I2C_SLAVE_EVENT_RX_REQ)
        I2C_DRV_SlaveSetRxBuffer(instance, slaveRxBuffer, BUFFER_SIZE);
    if (slaveEvent == I2C_SLAVE_EVENT_TX_REQ)
        I2C_DRV_SlaveSetTxBuffer(instance, slaveTxBuffer, BUFFER_SIZE);
}

int main(void){

    status_t retCode; 

    /* ... */

    /* Initialize I2C master module */
    I2C_DRV_MasterInit(INST_I2C4, &i2c1_MasterConfig0, &i2c0MasterState);

    /* Initialize I2C slave module */
    I2C_DRV_SlaveInit(INST_I2C3, &i2c1_SlaveConfig0, &i2c1SlaveState);

    /* Master sends data to slave */
    retCode = I2C_DRV_MasterSendData(INST_I2C4, masterTxBuffer, BUFFER_SIZE, true);
   
    /* ... */
   
    I2C_DRV_MasterDeinit(INST_I2C4);
    I2C_DRV_SlaveDeinit(INST_I2C3);
    
}
@endcode

  ## Integration guideline ##
 
### Compilation units ###

The following files need to be compiled in the project:
\verbatim
${S32SDK_PATH}\platform\drivers\src\i2c\i2c_irq.c
${S32SDK_PATH}\platform\drivers\src\i2c\i2c_hw_access.c
${S32SDK_PATH}\platform\drivers\src\i2c\i2c_driver.c
\endverbatim

### Include path ###

The following paths need to be added to the include path of the toolchain:
\verbatim
${S32SDK_PATH}\platform\drivers\inc
${S32SDK_PATH}\platform\drivers\src\i2c
\endverbatim

### Preprocessor symbols ###

No special symbols are required for this component

### Dependencies ###

\ref clock_manager
\ref osif
\ref interrupt_manager
\ref edma

*/
